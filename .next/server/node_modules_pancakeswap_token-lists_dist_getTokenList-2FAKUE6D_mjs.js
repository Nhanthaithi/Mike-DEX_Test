"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "node_modules_pancakeswap_token-lists_dist_getTokenList-2FAKUE6D_mjs";
exports.ids = ["node_modules_pancakeswap_token-lists_dist_getTokenList-2FAKUE6D_mjs"];
exports.modules = {

/***/ "./node_modules/@pancakeswap/token-lists/dist/getTokenList-2FAKUE6D.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@pancakeswap/token-lists/dist/getTokenList-2FAKUE6D.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getTokenList),\n/* harmony export */   tokenListValidator: () => (/* binding */ tokenListValidator)\n/* harmony export */ });\n/* harmony import */ var _chunk_2L3ZO4UM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-2L3ZO4UM.mjs */ \"./node_modules/@pancakeswap/token-lists/dist/chunk-2L3ZO4UM.mjs\");\n/* harmony import */ var lodash_remove__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/remove */ \"lodash/remove\");\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ajv */ \"ajv\");\n\n\n\n// ../utils/uriToHttp.ts\nfunction uriToHttp(uri) {\n    var _a, _b;\n    const protocol = uri.split(\":\")[0].toLowerCase();\n    switch(protocol){\n        case \"https\":\n            return [\n                uri\n            ];\n        case \"http\":\n            return [\n                `https${uri.substring(4)}`,\n                uri\n            ];\n        case \"ipfs\":\n            const hash = (_a = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) == null ? void 0 : _a[2];\n            return [\n                `https://cloudflare-ipfs.com/ipfs/${hash}/`,\n                `https://ipfs.io/ipfs/${hash}/`\n            ];\n        case \"ipns\":\n            const name = (_b = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) == null ? void 0 : _b[2];\n            return [\n                `https://cloudflare-ipfs.com/ipns/${name}/`,\n                `https://ipfs.io/ipns/${name}/`\n            ];\n        default:\n            return [];\n    }\n}\n// schema/pancakeswap.json\nvar pancakeswap_default = {\n    $schema: \"http://json-schema.org/draft-07/schema#\",\n    $id: \"pancakeswap\",\n    title: \"PancakeSwap Token List\",\n    description: \"Schema for lists of tokens compatible with the PancakeSwap Interface, including Uniswap standard and PancakeSwap Aptos\",\n    definitions: {\n        Version: {\n            type: \"object\",\n            description: \"The version of the list, used in change detection\",\n            examples: [\n                {\n                    major: 1,\n                    minor: 0,\n                    patch: 0\n                }\n            ],\n            additionalProperties: false,\n            properties: {\n                major: {\n                    type: \"integer\",\n                    description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n                    minimum: 0,\n                    examples: [\n                        1,\n                        2\n                    ]\n                },\n                minor: {\n                    type: \"integer\",\n                    description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n                    minimum: 0,\n                    examples: [\n                        0,\n                        1\n                    ]\n                },\n                patch: {\n                    type: \"integer\",\n                    description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n                    minimum: 0,\n                    examples: [\n                        0,\n                        1\n                    ]\n                }\n            },\n            required: [\n                \"major\",\n                \"minor\",\n                \"patch\"\n            ]\n        },\n        TagIdentifier: {\n            type: \"string\",\n            description: \"The unique identifier of a tag\",\n            minLength: 1,\n            maxLength: 10,\n            pattern: \"^[\\\\w]+$\",\n            examples: [\n                \"compound\",\n                \"stablecoin\"\n            ]\n        },\n        ExtensionIdentifier: {\n            type: \"string\",\n            description: \"The name of a token extension property\",\n            minLength: 1,\n            maxLength: 40,\n            pattern: \"^[\\\\w]+$\",\n            examples: [\n                \"color\",\n                \"is_fee_on_transfer\",\n                \"aliases\"\n            ]\n        },\n        ExtensionMap: {\n            type: \"object\",\n            description: \"An object containing any arbitrary or vendor-specific token metadata\",\n            maxProperties: 10,\n            propertyNames: {\n                $ref: \"#/definitions/ExtensionIdentifier\"\n            },\n            additionalProperties: {\n                $ref: \"#/definitions/ExtensionValue\"\n            },\n            examples: [\n                {\n                    color: \"#000000\",\n                    is_verified_by_me: true\n                },\n                {\n                    \"x-bridged-addresses-by-chain\": {\n                        \"1\": {\n                            bridgeAddress: \"0x4200000000000000000000000000000000000010\",\n                            tokenAddress: \"0x4200000000000000000000000000000000000010\"\n                        }\n                    }\n                }\n            ]\n        },\n        ExtensionPrimitiveValue: {\n            anyOf: [\n                {\n                    type: \"string\",\n                    minLength: 1,\n                    maxLength: 42,\n                    examples: [\n                        \"#00000\"\n                    ]\n                },\n                {\n                    type: \"boolean\",\n                    examples: [\n                        true\n                    ]\n                },\n                {\n                    type: \"number\",\n                    examples: [\n                        15\n                    ]\n                },\n                {\n                    type: \"null\"\n                }\n            ]\n        },\n        ExtensionValue: {\n            anyOf: [\n                {\n                    $ref: \"#/definitions/ExtensionPrimitiveValue\"\n                },\n                {\n                    type: \"object\",\n                    maxProperties: 10,\n                    propertyNames: {\n                        $ref: \"#/definitions/ExtensionIdentifier\"\n                    },\n                    additionalProperties: {\n                        $ref: \"#/definitions/ExtensionValueInner0\"\n                    }\n                }\n            ]\n        },\n        ExtensionValueInner0: {\n            anyOf: [\n                {\n                    $ref: \"#/definitions/ExtensionPrimitiveValue\"\n                },\n                {\n                    type: \"object\",\n                    maxProperties: 10,\n                    propertyNames: {\n                        $ref: \"#/definitions/ExtensionIdentifier\"\n                    },\n                    additionalProperties: {\n                        $ref: \"#/definitions/ExtensionValueInner1\"\n                    }\n                }\n            ]\n        },\n        ExtensionValueInner1: {\n            anyOf: [\n                {\n                    $ref: \"#/definitions/ExtensionPrimitiveValue\"\n                }\n            ]\n        },\n        TagDefinition: {\n            type: \"object\",\n            description: \"Definition of a tag that can be associated with a token via its identifier\",\n            additionalProperties: false,\n            properties: {\n                name: {\n                    type: \"string\",\n                    description: \"The name of the tag\",\n                    pattern: \"^[ \\\\w]+$\",\n                    minLength: 1,\n                    maxLength: 20\n                },\n                description: {\n                    type: \"string\",\n                    description: \"A user-friendly description of the tag\",\n                    pattern: \"^[ \\\\w\\\\.,:]+$\",\n                    minLength: 1,\n                    maxLength: 200\n                }\n            },\n            required: [\n                \"name\",\n                \"description\"\n            ],\n            examples: [\n                {\n                    name: \"Stablecoin\",\n                    description: \"A token with value pegged to another asset\"\n                }\n            ]\n        },\n        TokenInfo: {\n            type: \"object\",\n            description: \"Metadata for a single token in a token list\",\n            additionalProperties: false,\n            properties: {\n                chainId: {\n                    type: \"integer\",\n                    description: \"The chain ID of the Ethereum network where this token is deployed\",\n                    minimum: 1,\n                    examples: [\n                        1,\n                        42\n                    ]\n                },\n                address: {\n                    type: \"string\",\n                    description: \"The checksummed address of the token on the specified chain ID\",\n                    pattern: \"^0x[a-fA-F0-9]{40}$\",\n                    examples: [\n                        \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\n                    ]\n                },\n                decimals: {\n                    type: \"integer\",\n                    description: \"The number of decimals for the token balance\",\n                    minimum: 0,\n                    maximum: 255,\n                    examples: [\n                        18\n                    ]\n                },\n                name: {\n                    type: \"string\",\n                    description: \"The name of the token\",\n                    minLength: 1,\n                    maxLength: 40,\n                    pattern: \"^[ \\\\w.'+\\\\-%/\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff:&\\\\[\\\\]\\\\(\\\\)]+$\",\n                    examples: [\n                        \"USD Coin\"\n                    ]\n                },\n                symbol: {\n                    type: \"string\",\n                    description: \"The symbol for the token; must be alphanumeric\",\n                    pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n                    minLength: 1,\n                    maxLength: 20,\n                    examples: [\n                        \"USDC\"\n                    ]\n                },\n                logoURI: {\n                    type: \"string\",\n                    description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n                    format: \"uri\",\n                    examples: [\n                        \"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\n                    ]\n                },\n                tags: {\n                    type: \"array\",\n                    description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n                    items: {\n                        $ref: \"#/definitions/TagIdentifier\"\n                    },\n                    maxItems: 10,\n                    examples: [\n                        \"stablecoin\",\n                        \"compound\"\n                    ]\n                },\n                extensions: {\n                    $ref: \"#/definitions/ExtensionMap\"\n                }\n            },\n            required: [\n                \"chainId\",\n                \"address\",\n                \"decimals\",\n                \"name\",\n                \"symbol\"\n            ]\n        },\n        AptosTokenInfo: {\n            type: \"object\",\n            description: \"Metadata for a single token in a token list\",\n            additionalProperties: false,\n            properties: {\n                chainId: {\n                    type: \"integer\",\n                    description: \"The chain ID of the Aptos network where this token is deployed, 0 is devent\",\n                    minimum: 0,\n                    examples: [\n                        1,\n                        42\n                    ]\n                },\n                address: {\n                    type: \"string\",\n                    description: \"The address of the coin on the specified chain ID\",\n                    examples: [\n                        \"0x1::aptos_coin::AptosCoin\"\n                    ]\n                },\n                decimals: {\n                    type: \"integer\",\n                    description: \"The number of decimals for the token balance\",\n                    minimum: 0,\n                    maximum: 255,\n                    examples: [\n                        18\n                    ]\n                },\n                name: {\n                    type: \"string\",\n                    description: \"The name of the token\",\n                    minLength: 1,\n                    maxLength: 40,\n                    pattern: \"^[ \\\\w.'+\\\\-%/\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff:&\\\\[\\\\]\\\\(\\\\)]+$\",\n                    examples: [\n                        \"USD Coin\"\n                    ]\n                },\n                symbol: {\n                    type: \"string\",\n                    description: \"The symbol for the token; must be alphanumeric\",\n                    pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n                    minLength: 1,\n                    maxLength: 20,\n                    examples: [\n                        \"USDC\"\n                    ]\n                },\n                logoURI: {\n                    type: \"string\",\n                    description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n                    format: \"uri\",\n                    examples: [\n                        \"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\n                    ]\n                },\n                tags: {\n                    type: \"array\",\n                    description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n                    items: {\n                        $ref: \"#/definitions/TagIdentifier\"\n                    },\n                    maxItems: 10,\n                    examples: [\n                        \"stablecoin\",\n                        \"compound\"\n                    ]\n                },\n                extensions: {\n                    $ref: \"#/definitions/ExtensionMap\"\n                }\n            },\n            required: [\n                \"chainId\",\n                \"address\",\n                \"decimals\",\n                \"name\",\n                \"symbol\"\n            ]\n        }\n    },\n    type: \"object\",\n    additionalProperties: false,\n    properties: {\n        name: {\n            type: \"string\",\n            description: \"The name of the token list\",\n            minLength: 1,\n            maxLength: 30,\n            pattern: \"^[\\\\w ]+$\",\n            examples: [\n                \"My Token List\"\n            ]\n        },\n        timestamp: {\n            type: \"string\",\n            format: \"date-time\",\n            description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n        },\n        schema: {\n            type: \"string\"\n        },\n        version: {\n            $ref: \"#/definitions/Version\"\n        },\n        tokens: {\n            type: \"array\",\n            description: \"The list of tokens included in the list\",\n            minItems: 1,\n            maxItems: 1e4\n        },\n        keywords: {\n            type: \"array\",\n            description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n            items: {\n                type: \"string\",\n                description: \"A keyword to describe the contents of the list\",\n                minLength: 1,\n                maxLength: 20,\n                pattern: \"^[\\\\w ]+$\",\n                examples: [\n                    \"compound\",\n                    \"lending\",\n                    \"personal tokens\"\n                ]\n            },\n            maxItems: 20,\n            uniqueItems: true\n        },\n        tags: {\n            type: \"object\",\n            description: \"A mapping of tag identifiers to their name and description\",\n            propertyNames: {\n                $ref: \"#/definitions/TagIdentifier\"\n            },\n            additionalProperties: {\n                $ref: \"#/definitions/TagDefinition\"\n            },\n            maxProperties: 20,\n            examples: [\n                {\n                    stablecoin: {\n                        name: \"Stablecoin\",\n                        description: \"A token with value pegged to another asset\"\n                    }\n                }\n            ]\n        },\n        logoURI: {\n            type: \"string\",\n            description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n            format: \"uri\",\n            examples: [\n                \"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"\n            ]\n        }\n    },\n    if: {\n        properties: {\n            schema: {\n                const: \"aptos\"\n            }\n        },\n        required: [\n            \"name\",\n            \"timestamp\",\n            \"version\",\n            \"tokens\",\n            \"schema\"\n        ]\n    },\n    then: {\n        properties: {\n            tokens: {\n                items: {\n                    $ref: \"#/definitions/AptosTokenInfo\"\n                },\n                type: \"array\",\n                description: \"The list of tokens included in the list\",\n                minItems: 1,\n                maxItems: 1e4\n            }\n        }\n    },\n    else: {\n        properties: {\n            tokens: {\n                items: {\n                    $ref: \"#/definitions/TokenInfo\"\n                },\n                type: \"array\",\n                description: \"The list of tokens included in the list\",\n                minItems: 1,\n                maxItems: 1e4\n            }\n        }\n    },\n    required: [\n        \"name\",\n        \"timestamp\",\n        \"version\",\n        \"tokens\"\n    ]\n};\n// react/getTokenList.ts\nvar tokenListValidator = new ajv__WEBPACK_IMPORTED_MODULE_2__({\n    allErrors: true\n}).compile(pancakeswap_default);\nfunction getTokenList(listUrl) {\n    return (0,_chunk_2L3ZO4UM_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function*() {\n        var _a, _b;\n        const urls = uriToHttp(listUrl);\n        for(let i = 0; i < urls.length; i++){\n            const url = urls[i];\n            const isLast = i === urls.length - 1;\n            let response;\n            try {\n                response = yield fetch(url);\n            } catch (error) {\n                console.error(\"Failed to fetch list\", listUrl, error);\n                if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n                continue;\n            }\n            if (!response.ok) {\n                if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n                continue;\n            }\n            const json = yield response.json();\n            if (json.tokens) {\n                lodash_remove__WEBPACK_IMPORTED_MODULE_1__(json.tokens, (token)=>{\n                    return token.symbol ? token.symbol.length === 0 : true;\n                });\n            }\n            if (!tokenListValidator(json)) {\n                const validationErrors = (_b = (_a = tokenListValidator.errors) == null ? void 0 : _a.reduce((memo, error)=>{\n                    var _a2;\n                    const add = `${error.dataPath} ${(_a2 = error.message) != null ? _a2 : \"\"}`;\n                    return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n                }, \"\")) != null ? _b : \"unknown error\";\n                throw new Error(`Token list failed validation: ${validationErrors}`);\n            }\n            return json;\n        }\n        throw new Error(\"Unrecognized list URL protocol.\");\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@pancakeswap/token-lists/dist/getTokenList-2FAKUE6D.mjs\n");

/***/ })

};
;